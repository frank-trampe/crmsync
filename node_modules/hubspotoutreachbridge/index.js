var program = require("commander");
const requestp = require("request-promise-native");
const frankenlib = require("frankenlib");
const hslib = require("hubspotjs");
const orlib = require("outreachjs");
function errPass(err) { return Promise.reject(err); }

function emailDomain(address) {
	return frankenlib.email_domain(address);
}

function arrayToDict(arrayData, keyName) {
	return frankenlib.array_to_dict(arrayData, keyName);
}

function dictToArray(dictData, keyName) {
	return frankenlib.dict_to_array(dictData, keyName);
}

function checkPathInDict(dict, dPath) {
	return frankenlib.check_path_in_dict(dict, dPath);
}

function makeQueryString(exso) {
	return frankenlib.make_query_string(exso);
}

function divideArray(flatArray, divisionSize) {
	return frankenlib.divide_array(flatArray, divisionSize);
}

function undivideArray(slicesArray) {
	return frankenlib.undivide_array(slicesArray);
}

// We pull e-mail addresses and domains into dictionaries and convert to arrays.
// Page the e-mail addresses into batches of 8.
// Put e-mail address batch fetches into one array of promises.
// Put individual e-mail domain fetches into another array.
// Aggregate results in dependent promises and merge those.
// Convert back to dictionaries.

function extractDomainsFromAddresses(addresses) {
	var domainLookup = {};
	addresses.forEach(function (addressT) {
		var td = emailDomain(addressT);
		if (td) domainLookup[td] = 1;
	});
	var domainList = [];
	if (1) {
		var td;
		for (td in domainLookup) {
			domainList.push(td);
		}
	}
	return domainList;
}

function outreachImportAdjust(outreachToken, hubspotToken, opts) {
	// hubspotToken must contain hapikey.
	// Get Outreach data.
	// https://api.outreach.io/1.0/prospects?filter[metadata/updated/after]=yyyy-MM-ddTHH:mm
	// Prepare the original Outreach query.
	var orqp = {};
	var nowDate = new Date();
	if ("recentOnly" in opts && opts.recentOnly) orqp["filter[metadata/updated/after]"] = new Date(nowDate.valueOf()-60*60*1000); // Go back one hour.
	if ("cutDate" in opts) orqp["filter[metadata/updated/after]"] = opts.cutDate;
	var terminalStageNames = {};
	// Prepare the Hubspot token.
	var hshapikey = null;
	if ("hapikey" in hubspotToken) hshapikey = hubspotToken.hapikey;
	return orlib.outreachRecordsGetAllWithToken("https://api.outreach.io/1.0/prospects",
		orqp, outreachToken)
	.then(function (outreachContacts) {
		// Filter out terminal stage records.
		var outreachContactsFiltered = orlib.outreachProspectsV1DropByStage(outreachContacts, opts.outreach.stagesTerminalNames);
		// Get just the e-mail addresses.
		var outreachAddresses = orlib.outreachProspectsV1ExtractAddresses(outreachContactsFiltered);
		// Get Hubspot data.
		var hsos = {getCompanyContacts: 1, hapikey: hshapikey};
		if (checkPathInDict(opts, ["hubspot", "scheduler"])) hsos.scheduler = opts.hubspot.scheduler;
		return hslib.hubspotDataFetchForAddresses(outreachAddresses, hsos)
		.then(function (hubspotData) {
			return {outreachContacts, outreachContactsFiltered, outreachAddresses, hubspotData};
		}, errPass);
	}, errPass)
	.then(function (lastData) {
		// Process Hubspot data.
		var hubspotData = lastData.hubspotData;
		var outreachContactsFiltered = lastData.outreachContactsFiltered;
		var companyDomainsHighStage = {};
		var tDomain;
		for (tDomain in hubspotData.hsCompanyLookup) {		
			if (checkPathInDict(hubspotData.hsCompanyLookup[tDomain], ["properties", "lifecyclestage", "value"]) &&
					typeof(hubspotData.hsCompanyLookup[tDomain].properties.lifecyclestage.value) == "string" &&
					checkPathInDict(opts, ["hubspot", "stages"]) && checkPathInDict(opts, ["hubspot", "stageHighIndex"]) &&
					opts.hubspot.stages instanceof Array && typeof(opts.hubspot.stageHighIndex) == "number" &&
					opts.hubspot.stages.indexOf(hubspotData.hsCompanyLookup[tDomain].properties.lifecyclestage.value) >=
					opts.hubspot.stageHighIndex)
				companyDomainsHighStage[tDomain] = 1;
			if ('hsCompanyContactsLookup' in hubspotData && hubspotData.hsCompanyContactsLookup &&
					tDomain in hubspotData.hsCompanyContactsLookup)
				hubspotData.hsCompanyContactsLookup.forEach(function (companyContact) {
					if (checkPathInDict(companyContact, ["properties", "lifecyclestage", "value"]) &&
							typeof(companyContact.properties.lifecyclestage.value) == "string" &&
							checkPathInDict(opts, ["hubspot", "stages"]) &&
							checkPathInDict(opts, ["hubspot", "stageHighIndex"]) &&
							opts.hubspot.stages instanceof Array &&
							typeof(opts.hubspot.stageHighIndex) == "number" &&
							opts.hubspot.stages.indexOf(companyContact.properties.lifecyclestage.value) >=
							opts.hubspot.stageHighIndex)
						companyDomainsHighStage[tDomain] = 1;
				});
		}
		// Compute Outreach changes.
		var outreachStagePatches = [];
		outreachContactsFiltered.forEach(function (orc) {
			var ema = orlib.outreachProspectV1ExtractAddress(orc);
			var emd = frankenlib.email_domain(ema);
			if (emd) {
				if (1) {
					// This is for V1.
					if (emd && emd in companyDomainsHighStage && companyDomainsHighStage[emd]) {
						if (!checkPathInDict(orc, ["attributes", "stage", "name"]) ||
								orc.attributes.stage.name != opts.outreach.stageMap.highStageCompany.name) {
							outreachStagePatches.push({id: orc.id, attributes: {
								"stage": {
									"name": opts.outreach.stageMap.highStageCompany.name
								}
							}});
							if ('debug' in opts && opts.debug) {
								console.log("Change Outreach prospect " + orc.id +
									" with e-mail address " + orc.attributes.contact.email +
									" to stage " + opts.outreach.stageMap.highStageCompany.name + ".");
							}
						}
					} else if (ema in hubspotData.hsContactLookup) {
						if (!checkPathInDict(orc, ["attributes", "stage", "name"]) ||
								orc.attributes.stage.name != opts.outreach.stageMap.contactListed.name) {
							outreachStagePatches.push({id: orc.id, attributes: {
								"stage": {
									"name": opts.outreach.stageMap.contactListed.name
								}
							}});
							if ('debug' in opts && opts.debug) {
								console.log("Change Outreach prospect " + orc.id +
									" with e-mail address " + orc.attributes.contact.email +
									" to stage " + opts.outreach.stageMap.contactListed.name + ".");
							}
						}
					}
				} else {
					// This is for V2.
					if (emd && emd in companyDomainsHighStage && companyDomainsHighStage[emd]) {
						if (!checkPathInDict(orc, ["relationships", "stage", "data", "id"]) ||
								orc.relationships.stage.id != opts.outreach.stageMap.highStageCompany.id) {
							outreachStagePatches.push({id: orc.id, relationships: {
								"stage": {
									"data": {
										"type": "stage",
										"id": opts.outreach.stageMap.highStageCompany.id /* TODO: Figure out the id for high stage. */
									}
								}
							}});
							if ('debug' in opts && opts.debug) {
								console.log("Change Outreach prospect " + orc.id +
									" with e-mail address " + orc.attributes.emails[0] +
									" to stage " + opts.outreach.stageMap.highStageCompany.id + ".");
							}
						}
					} else if (ema in hubspotData.hsContactLookup) {
						if (!checkPathInDict(orc, ["relationships", "stage", "data", "id"]) ||
								orc.relationships.stage.id != opts.outreach.stageMap.contactListed.id) {
							outreachStagePatches.push({id: orc.id, relationships: {
								"stage": {
									"data": {
										"type": "stage",
										"id": opts.outreach.stageMap.contactListed.id /* TODO: Figure out the id for already in hubspot. */
									}
								}
							}});
							if ('debug' in opts && opts.debug) {
								console.log("Change Outreach prospect " + orc.id +
									" with e-mail address " + orc.attributes.emails[0] +
									" to stage " + opts.outreach.stageMap.contactListed.id + ".");
							}
						}
					}
				}
			}
		});
		// Write back to Outreach.
		// Patch each to https://api.outreach.io/1.0/prospects/:id in parallel.
		// Or.
		// Patch each to https://api.outreach.io/api/v2/prospects/:id in parallel.
		var outreachPatchJobs = [];
		if ('writeEnable' in opts && opts.writeEnable) {
			var orhs = {};
			orlib.outreachHeadersAppendToken(orhs, outreachToken);
			outreachStagePatches.forEach(function (rec) {
				if (1) {
					outreachPatchJobs.push(orlib.outreachRecordPatch("https://api.outreach.io/1.0/prospects/" + rec.id, {}, orhs, {data: rec}));
				} else {
					outreachPatchJobs.push(orlib.outreachRecordPatch("https://api.outreach.io/api/v2/prospects/" + rec.id, {}, orhs, {data: rec}));
				}
			});
		}
		return Promise.all(outreachPatchJobs)
		.then(function (rvs) {
			return {method: "patch", plan: outreachStagePatches, results: rvs};
		}, errPass);
	}, errPass);
}
// TODO: Store last Hubspot pass.
function outreachPreCampaignAdjust(outreachToken, hubspotToken, opts) {
	// Pull all contacts and companies updated on Hubspot since last time. Or just all of them.
	// https://api.hubapi.com/contacts/v1/lists/recently_updated/contacts/recent
	var qps = {};
	if ("hapikey" in hubspotToken && hubspotToken.hapikey) qps["hapikey"] = hubspotToken.hapikey;
	qps["property"] = ["email", "lifecyclestage"];
	var qpath = "https://api.hubapi.com/contacts/v1/lists/all/contacts/all";
	if ("recentOnly" in opts && opts.recentOnly) qpath = "https://api.hubapi.com/contacts/v1/lists/recently_updated/contacts/recent";
	return hslib.hubspotRecordsGetAll(opts.hubspot, "GET", qpath, qps, "contacts")
	.then(function (hubspotRecords) {
		var companyDomains = {};
		var companyDomainsHighStage = {};
		var contactsLookup = {};
		var companyFetches = [];
		hubspotRecords.forEach(function (companyContact) {
			if (checkPathInDict(companyContact, ["properties", "email", "value"]) &&
					typeof(companyContact.properties.email.value) == "string") {
				var tDomain = frankenlib.email_domain(companyContact.properties.email.value);
				if (tDomain && tDomain.length > 0) {
					// If the e-mail address is semi-valid, add the contact to the in-Hubspot look-up.
					contactsLookup[companyContact.properties.email.value] = companyContact;
					companyDomains[tDomain] = 1;
					// If the contact is high-stage, add the company to the high-stage look-up.
					if (checkPathInDict(companyContact, ["properties", "lifecyclestage", "value"]) &&
							typeof(companyContact.properties.lifecyclestage.value) == "string" &&
							opts.hubspot.stages.indexOf(companyContact.properties.lifecyclestage.value) >=
							opts.hubspot.stageHighIndex)
						companyDomainsHighStage[tDomain] = 1;
				}
			}
		});
		// Due to limitations in Outreach, we need to fetch the companies on Hubspot in order to get their names.
		var highStageDomainList = Object.keys(companyDomains);
		// console.log(highStageDomainList);
		var hsos = {hapikey: hubspotToken.hapikey};
		if (checkPathInDict(opts, ["hubspot", "scheduler"])) hsos.scheduler = opts.hubspot.scheduler;
		return hslib.hubspotCompaniesGetByDomain(highStageDomainList, hsos)
		.then(function (companyResults) {
			var companiesHighStageByDomain = {};
			var companiesHighStageByName = {};
			if (companyResults instanceof Array)
				companyResults.forEach(function (companyRecord) {
					// Check whether one of the contacts flagged the domain as high stage.
					// Check whether the record itself is high stage.
					// In either case, add to the appropriate look-ups.
					if ((checkPathInDict(companyRecord, ["properties", "domain", "value"]) &&
							companyRecord.properties.domain.value in companyDomainsHighStage) ||
							(checkPathInDict(companyRecord, ["properties", "lifecyclestage", "value"]) &&
							typeof(companyRecord.properties.lifecyclestage.value) == "string" &&
							opts.hubspot.stages.indexOf(companyRecord.properties.lifecyclestage.value) >=
							opts.hubspot.stageHighIndex)) {
						if (checkPathInDict(companyRecord, ["properties", "domain", "value"]) &&
								typeof(companyRecord.properties.domain.value) == "string" &&
								companyRecord.properties.domain.value.length > 0) {
							companiesHighStageByDomain[companyRecord.properties.domain.value] = companyRecord;
						}
						if (checkPathInDict(companyRecord, ["properties", "name", "value"]) &&
								typeof(companyRecord.properties["name"].value) == "string" &&
								companyRecord.properties["name"].value.length > 0) {
							companiesHighStageByName[companyRecord.properties["name"].value] = companyRecord;
						}
					}
				});
			return {contactsLookup, companiesHighStageByDomain, companiesHighStageByName};
		}, errPass);
	}, errPass)
	.then(function (hubspotData) {
		// console.log(hubspotData);
		// We will want to search by individual address and by domain name.
		var individualFetches = [];
		var companyFetches = [];
		Object.keys(hubspotData.contactsLookup).forEach(function (emailAddress) {
			individualFetches.push(orlib.outreachRecordsGetAllWithToken("https://api.outreach.io/1.0/prospects",
			{"filter[contact/email]": emailAddress}, outreachToken));
		});
		Object.keys(hubspotData.companiesHighStageByName).forEach(function (companyName) {
			companyFetches.push(orlib.outreachRecordsGetAllWithToken("https://api.outreach.io/1.0/prospects",
			{"filter[company/name]": companyName}, outreachToken));
		});
		return Promise.all([Promise.all(individualFetches), Promise.all(companyFetches)])
		.then(function (outreachResults) {
			var individualContacts = [];
			var companyContacts = [];
			outreachResults[0].forEach(function (ict) {
				ict.forEach(function (ictt) {
					individualContacts.push(ictt);
				});
			});
			outreachResults[1].forEach(function (ict) {
				ict.forEach(function (ictt) {
					companyContacts.push(ictt);
				});
			});
			return {hubspotData: hubspotData, outreachData: {individualContacts: individualContacts, companyContacts: companyContacts}};
		}, errPass);
	}, errPass)
	.then(function (existingData) {
		// console.log(existingData);
		var highStageChangeList = [];
		var contactListedChangeList = [];
		var stageChangeLookup = {};
		// Flag contacts already listed in Hubspot.
		existingData.outreachData.individualContacts.forEach(function (outreachContact) {
			// Check that the contact has a stage and that the stage is non-terminal.
			// Also check that the current stage value is different from the target value.
			if (1) {
				// API V1.
				if (checkPathInDict(outreachContact, ["attributes", "stage", "name"]) &&
						opts.outreach.stagesTerminalNames.indexOf(outreachContact.attributes.stage.name) < 0)
					stageChangeLookup[outreachContact.id] = opts.outreach.stageMap.contactListed;
				// Drop the patch if the new value and the old value are the same.
				if (outreachContact.id in stageChangeLookup &&
						checkPathInDict(outreachContact, ["attributes", "stage", "name"]) &&
 						outreachContact.attributes.stage.name == stageChangeLookup[outreachContact.id].name)
					delete stageChangeLookup[outreachContact.id];
			} else {
				// API V2.
				if (checkPathInDict(outreachContact, ["relationships", "stage", "data", "id"]) &&
						opts.outreach.stagesTerminalIds.indexOf(outreachContact.relationships.stage.data.id) < 0)
					stageChangeLookup[outreachContact.id] = opts.outreach.stageMap.contactListed;
				// Drop the patch if the new value and the old value are the same.
				if (outreachContact.id in stageChangeLookup &&
						checkPathInDict(outreachContact, ["relationships", "stage", "data", "id"]) &&
						outreachContact.relationships.stage.data.id == stageChangeLookup[outreachContact.id].id)
					delete stageChangeLookup[outreachContact.id];
			}
		});
		// Flag contacts whose companies are high-stage in Hubspot.
		existingData.outreachData.companyContacts.forEach(function (outreachContact) {
			// Check that the contact has a stage and that the stage is non-terminal.
			if (1) {
				// API V1.
				if (checkPathInDict(outreachContact, ["attributes", "stage", "name"]) &&
						opts.outreach.stagesTerminalNames.indexOf(outreachContact.attributes.stage.name) < 0)
					stageChangeLookup[outreachContact.id] = opts.outreach.stageMap.highStageCompany;
				// Drop the patch if the new value and the old value are the same.
				if (outreachContact.id in stageChangeLookup &&
						checkPathInDict(outreachContact, ["attributes", "stage", "name"]) &&
						outreachContact.attributes.stage.name == stageChangeLookup[outreachContact.id].name)
					delete stageChangeLookup[outreachContact.id];
			} else {
				// API V2.
				if (checkPathInDict(outreachContact, ["relationships", "stage", "data", "id"]) &&
						opts.outreach.stagesTerminalIds.indexOf(outreachContact.relationships.stage.data.id) < 0)
					stageChangeLookup[outreachContact.id] = opts.outreach.stageMap.highStageCompany;
				// Drop the patch if the new value and the old value are the same.
				if (outreachContact.id in stageChangeLookup &&
						checkPathInDict(outreachContact, ["relationships", "stage", "data", "id"]) && 							outreachContact.relationships.stage.data.id == stageChangeLookup[outreachContact.id].id)
					delete stageChangeLookup[outreachContact.id];
			}
		});
		// Make a list of changes from the flag lookup.
		// console.log(stageChangeLookup);
		var outreachStagePatches = [];
		var tKey;
		for (tKey in stageChangeLookup) {
			if (1) {
				// This is for the V1 API.
				outreachStagePatches.push({id: tKey, attributes: {
					"stage": {
						"name": stageChangeLookup[tKey].name
					}
				}});

			} else {
				// This is for the V2 API.
				outreachStagePatches.push({id: tKey, relationships: {
					"stage": {
						"data": {
							"type": "stage",
							"id": stageChangeLookup[tKey].id
						}
					}
				}});
			}
		}
		// Write back to Outreach.
		// Patch each to https://api.outreach.io/api/v2/prospects/:id in parallel.
		if ('debug' in opts && opts.debug) {
			console.log(outreachStagePatches);
		}
		var outreachPatchJobs = [];
		if ('writeEnable' in opts && opts.writeEnable) {
			outreachStagePatches.forEach(function (rec) {
				var orhs = {};
				orlib.outreachHeadersAppendToken(orhs, outreachToken);
				if (1) {
					outreachPatchJobs.push(orlib.outreachRecordPatch("https://api.outreach.io/1.0/prospects/" + rec.id, {}, orhs, {data: {attributes: rec.attributes}}));
				} else {
					outreachPatchJobs.push(orlib.outreachRecordPatch("https://api.outreach.io/api/v2/prospects/" + rec.id, {}, orhs, {data: {attributes: rec.attributes}}));
				}
			});
		}
		return Promise.all(outreachPatchJobs)
		.then(function (rvs) {
			return {method: "patch", plan: outreachStagePatches, results: rvs};
		}, errPass);
	}, errPass);
}

function hubspotOutreachDump(outreachToken, hubspotToken, opts) {
	var fetches = [];
	// Prepare the original Outreach query.
	var orqp = {};
	var nowDate = new Date();
	if ("recentOnly" in opts && opts.recentOnly) orqp["filter[metadata/updated/after]"] = new Date(nowDate.valueOf()-60*60*1000); // Go back one hour.
	if ("cutDate" in opts) orqp["filter[metadata/updated/after]"] = opts.cutDate;
	console.log("Outreach prospects almost queued.");
	fetches.push(outreachToken ? orlib.outreachRecordsGetAllWithToken("https://api.outreach.io/1.0/prospects/", orqp, outreachToken) : Promise.resolve([]));
	console.log("Outreach prospects queued.");
	// Prepare the Hubspot contact query.
	var hsctqps = {};
	if ("hapikey" in hubspotToken && hubspotToken.hapikey) hsctqps["hapikey"] = hubspotToken.hapikey;
	hsctqps["property"] = ["email", "lifecyclestage"];
	var hsctqpath = "https://api.hubapi.com/contacts/v1/lists/all/contacts/all";
	if ("recentOnly" in opts && opts.recentOnly) hsctqpath = "https://api.hubapi.com/contacts/v1/lists/recently_updated/contacts/recent";
	fetches.push(hubspotToken ? hslib.hubspotRecordsGetAll(opts.hubspot, "GET", hsctqpath, hsctqps, "contacts") : Promise.resolve([]));
	console.log("Hubspot contacts queued.");
	// Prepare the Hubspot company query.
	var hscpqps = {};
	if ("hapikey" in hubspotToken && hubspotToken.hapikey) hscpqps["hapikey"] = hubspotToken.hapikey;
	hscpqps.properties = [
		"domain",
		"createdate",
		"name",
		"hs_lastmodifieddate",
		"lifecyclestage"
	];
	var hscpqpath = "https://api.hubapi.com/companies/v2/companies/paged";
	fetches.push(hubspotToken ? hslib.hubspotRecordsGetAll(opts.hubspot, "GET", hscpqpath, hscpqps, "companies") : Promise.resolve([]));
	console.log("Hubspot companies queued.");
	console.log("Joining.");
	// Join.
	return Promise.all(fetches)
	.then(function (rvs) {
		return {outreach: {prospects: rvs[0]}, hubspot: {contacts: rvs[1], companies: rvs[2]}};
	}, errPass);
}

// opts.outreach.stagesTerminal = [];
// opts.outreach.stageMap.highStageCompany.id
// opts.outreach.stageMap.contactListed.id

module.exports = exports = {outreachImportAdjust, outreachPreCampaignAdjust, hubspotOutreachDump};

